AWSTemplateFormatVersion: "2010-09-09"

Parameters:
    Stage:
        Type: String
        Default: prod
        AllowedValues:
            - dev
            - prod
        Description: The deployment stage (dev, prod)
    FrontendCloudFrontUrl:
        Type: String
        Description: The CloudFront URL of the frontend application
        Default: "https://dummy.cloudfront.net" # This will be overridden during deployment

Resources:
    # Lambda Function
    QueensSolverFunction:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Sub ${AWS::StackName}-function-${Stage}
            Runtime: python3.13
            Handler: lambda_function.lambda_handler
            Code:
                ZipFile: |
                    # This is a placeholder. The actual code will be updated via the deploy job
                    def lambda_handler(event, context):
                        return {"statusCode": 200, "body": "Placeholder"}
            Timeout: 30
            MemorySize: 256
            Environment:
                Variables:
                    ENVIRONMENT: !Ref Stage
                    API_STAGE: !Ref Stage
                    LOG_LEVEL: INFO
                    ALLOWED_ORIGINS: !Ref FrontendCloudFrontUrl
            Role: !GetAtt LambdaExecutionRole.Arn

    # Lambda Execution Role
    LambdaExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service: lambda.amazonaws.com
                      Action: sts:AssumeRole
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
            Policies:
                - PolicyName: LambdaLogging
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Effect: Allow
                            Action:
                                - logs:CreateLogGroup
                                - logs:CreateLogStream
                                - logs:PutLogEvents
                            Resource: "*"

    # API Gateway
    QueensSolverApi:
        Type: AWS::ApiGateway::RestApi
        Properties:
            Name: !Sub ${AWS::StackName}-api-${Stage}
            Description: API for Queens Solver game
            EndpointConfiguration:
                Types:
                    - REGIONAL

    # API Gateway Stage
    ApiStage:
        Type: AWS::ApiGateway::Stage
        Properties:
            DeploymentId: !Ref ApiDeployment
            RestApiId: !Ref QueensSolverApi
            StageName: !Ref Stage
            Variables:
                lambdaAlias: !Ref Stage

    # API Gateway Deployment
    ApiDeployment:
        Type: AWS::ApiGateway::Deployment
        DependsOn:
            - ApiRootMethod
            - ApiBoardsLatestMethod
        Properties:
            RestApiId: !Ref QueensSolverApi
            Description: !Sub "Deployment for ${Stage} stage"

    # API Gateway Resources
    ApiRootResource:
        Type: AWS::ApiGateway::Resource
        Properties:
            RestApiId: !Ref QueensSolverApi
            ParentId: !GetAtt QueensSolverApi.RootResourceId
            PathPart: ""

    ApiBoardsResource:
        Type: AWS::ApiGateway::Resource
        Properties:
            RestApiId: !Ref QueensSolverApi
            ParentId: !GetAtt QueensSolverApi.RootResourceId
            PathPart: "boards"

    ApiBoardsLatestResource:
        Type: AWS::ApiGateway::Resource
        Properties:
            RestApiId: !Ref QueensSolverApi
            ParentId: !Ref ApiBoardsResource
            PathPart: "latest"

    # API Gateway Methods
    ApiRootMethod:
        Type: AWS::ApiGateway::Method
        Properties:
            RestApiId: !Ref QueensSolverApi
            ResourceId: !GetAtt QueensSolverApi.RootResourceId
            HttpMethod: GET
            AuthorizationType: NONE
            Integration:
                Type: AWS_PROXY
                IntegrationHttpMethod: POST
                Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${QueensSolverFunction.Arn}/invocations
            MethodResponses:
                - StatusCode: 200
                  ResponseModels:
                      application/json: "Empty"
                  ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: true

    ApiBoardsLatestMethod:
        Type: AWS::ApiGateway::Method
        Properties:
            RestApiId: !Ref QueensSolverApi
            ResourceId: !Ref ApiBoardsLatestResource
            HttpMethod: GET
            AuthorizationType: NONE
            Integration:
                Type: AWS_PROXY
                IntegrationHttpMethod: POST
                Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${QueensSolverFunction.Arn}/invocations
            MethodResponses:
                - StatusCode: 200
                  ResponseModels:
                      application/json: "Empty"
                  ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: true

    # CORS Configuration for /boards/latest
    BoardsLatestCorsMethod:
        Type: AWS::ApiGateway::Method
        Properties:
            RestApiId: !Ref QueensSolverApi
            ResourceId: !Ref ApiBoardsLatestResource
            HttpMethod: OPTIONS
            AuthorizationType: NONE
            Integration:
                Type: MOCK
                IntegrationResponses:
                    - StatusCode: 200
                      ResponseParameters:
                          method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                          method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                          method.response.header.Access-Control-Allow-Origin: !Sub "'${FrontendCloudFrontUrl}'"
                      ResponseTemplates:
                          application/json: "{}"
                PassthroughBehavior: WHEN_NO_MATCH
                RequestTemplates:
                    application/json: '{"statusCode": 200}'
            MethodResponses:
                - StatusCode: 200
                  ResponseModels:
                      application/json: "Empty"
                  ResponseParameters:
                      method.response.header.Access-Control-Allow-Headers: true
                      method.response.header.Access-Control-Allow-Methods: true
                      method.response.header.Access-Control-Allow-Origin: true

    # Lambda Permission for API Gateway
    LambdaPermission:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !GetAtt QueensSolverFunction.Arn
            Principal: apigateway.amazonaws.com
            SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${QueensSolverApi}/*/*/*

Outputs:
    ApiEndpoint:
        Description: API Gateway endpoint URL
        Value: !Sub https://${QueensSolverApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/
    QueensSolverFunction:
        Description: Queens Solver Lambda Function ARN
        Value: !GetAtt QueensSolverFunction.Arn

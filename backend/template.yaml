AWSTemplateFormatVersion: "2010-09-09"

Parameters:
    Stage:
        Type: String
        Default: prod
        AllowedValues:
            - dev
            - prod
        Description: The deployment stage (dev, prod)
    FrontendCloudFrontUrl:
        Type: String
        Description: The CloudFront URL of the frontend application
        Default: "https://dummy.cloudfront.net" # This will be overridden during deployment
    DependenciesLayerBucket:
        Type: String
        Description: S3 bucket containing the dependencies layer
    DependenciesLayerKey:
        Type: String
        Description: S3 key for the dependencies layer
    DomainName:
        Type: String
        Default: jamesgarner.me
        Description: The domain name to use for the application
    ApiSubdomain:
        Type: String
        Default: api
        Description: Subdomain for the API
    CertificateArn:
        Type: String
        Description: ARN of the SSL certificate for the API domain
    RateLimit:
        Type: Number
        Default: 5
        Description: Rate limit (requests per second)
    BurstLimit:
        Type: Number
        Default: 20
        Description: Burst limit for API requests
    QuotaLimit:
        Type: Number
        Default: 1000
        Description: Daily quota limit for API requests

Resources:
    # Lambda Layer for Dependencies
    DependenciesLayer:
        Type: AWS::Lambda::LayerVersion
        Properties:
            LayerName: !Sub ${AWS::StackName}-dependencies-${Stage}
            Description: Python dependencies for Queens Solver
            CompatibleRuntimes:
                - python3.13
            Content:
                S3Bucket: !Ref DependenciesLayerBucket
                S3Key: !Ref DependenciesLayerKey

    # Lambda Function
    QueensSolverFunction:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Sub ${AWS::StackName}-function-${Stage}
            Runtime: python3.13
            Handler: lambda_function.lambda_handler
            Code:
                ZipFile: |
                    # This is a placeholder. The actual code will be updated via the deploy job
                    def lambda_handler(event, context):
                        return {"statusCode": 200, "body": "Placeholder"}
            Timeout: 30
            MemorySize: 256
            Environment:
                Variables:
                    ENVIRONMENT: !Ref Stage
                    API_STAGE: !Ref Stage
                    LOG_LEVEL: INFO
                    ALLOWED_ORIGINS: !Sub "https://${DomainName}"
            Role: !GetAtt LambdaExecutionRole.Arn
            Layers:
                - !Ref DependenciesLayer

    # Lambda Execution Role
    LambdaExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service: lambda.amazonaws.com
                      Action: sts:AssumeRole
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
            Policies:
                - PolicyName: LambdaLogging
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Effect: Allow
                            Action:
                                - logs:CreateLogGroup
                                - logs:CreateLogStream
                                - logs:PutLogEvents
                            Resource: "*"

    # API Gateway
    QueensSolverApi:
        Type: AWS::ApiGateway::RestApi
        Properties:
            Name: !Sub ${AWS::StackName}-api-${Stage}
            Description: API for Queens Solver game
            EndpointConfiguration:
                Types:
                    - EDGE

    # API Gateway Stage
    ApiStage:
        Type: AWS::ApiGateway::Stage
        Properties:
            DeploymentId: !Ref ApiDeployment
            RestApiId: !Ref QueensSolverApi
            StageName: !Ref Stage
            Variables:
                lambdaAlias: !Ref Stage
            MethodSettings:
                - ResourcePath: "/*"
                  HttpMethod: "*"
                  ThrottlingBurstLimit: !Ref BurstLimit
                  ThrottlingRateLimit: !Ref RateLimit
                  CachingEnabled: true
                  CacheTtlInSeconds: 600 # 10 minute cache
                  MetricsEnabled: true
                  LoggingLevel: INFO
                  DataTraceEnabled: true

    # API Gateway Deployment
    ApiDeployment:
        Type: AWS::ApiGateway::Deployment
        DependsOn:
            - ApiRootMethod
            - ApiBoardsLatestMethod
            - ApiRootCorsMethod
            - BoardsLatestCorsMethod
        Properties:
            RestApiId: !Ref QueensSolverApi
            Description: !Sub "Deployment for ${Stage} stage"

    # API Gateway Resources

    ApiBoardsResource:
        Type: AWS::ApiGateway::Resource
        Properties:
            RestApiId: !Ref QueensSolverApi
            ParentId: !GetAtt QueensSolverApi.RootResourceId
            PathPart: "boards"

    ApiBoardsLatestResource:
        Type: AWS::ApiGateway::Resource
        Properties:
            RestApiId: !Ref QueensSolverApi
            ParentId: !Ref ApiBoardsResource
            PathPart: "latest"

    # API Gateway Methods
    ApiRootMethod:
        Type: AWS::ApiGateway::Method
        Properties:
            RestApiId: !Ref QueensSolverApi
            ResourceId: !GetAtt QueensSolverApi.RootResourceId
            HttpMethod: GET
            AuthorizationType: NONE
            Integration:
                Type: AWS_PROXY
                IntegrationHttpMethod: POST
                Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${QueensSolverFunction.Arn}/invocations
            MethodResponses:
                - StatusCode: 200
                  ResponseModels:
                      application/json: "Empty"
                  ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: true

    ApiBoardsLatestMethod:
        Type: AWS::ApiGateway::Method
        Properties:
            RestApiId: !Ref QueensSolverApi
            ResourceId: !Ref ApiBoardsLatestResource
            HttpMethod: GET
            AuthorizationType: NONE
            Integration:
                Type: AWS_PROXY
                IntegrationHttpMethod: POST
                Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${QueensSolverFunction.Arn}/invocations
            MethodResponses:
                - StatusCode: 200
                  ResponseModels:
                      application/json: "Empty"
                  ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: true

    # CORS Configuration for root
    ApiRootCorsMethod:
        Type: AWS::ApiGateway::Method
        Properties:
            RestApiId: !Ref QueensSolverApi
            ResourceId: !GetAtt QueensSolverApi.RootResourceId
            HttpMethod: OPTIONS
            AuthorizationType: NONE
            Integration:
                Type: MOCK
                IntegrationResponses:
                    - StatusCode: 200
                      ResponseParameters:
                          method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                          method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                          method.response.header.Access-Control-Allow-Origin: !Sub "'https://${DomainName}"
                      ResponseTemplates:
                          application/json: "{}"
                PassthroughBehavior: WHEN_NO_MATCH
                RequestTemplates:
                    application/json: '{"statusCode": 200}'
            MethodResponses:
                - StatusCode: 200
                  ResponseModels:
                      application/json: "Empty"
                  ResponseParameters:
                      method.response.header.Access-Control-Allow-Headers: true
                      method.response.header.Access-Control-Allow-Methods: true
                      method.response.header.Access-Control-Allow-Origin: true

    # CORS Configuration for /boards/latest
    BoardsLatestCorsMethod:
        Type: AWS::ApiGateway::Method
        Properties:
            RestApiId: !Ref QueensSolverApi
            ResourceId: !Ref ApiBoardsLatestResource
            HttpMethod: OPTIONS
            AuthorizationType: NONE
            Integration:
                Type: MOCK
                IntegrationResponses:
                    - StatusCode: 200
                      ResponseParameters:
                          method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                          method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                          method.response.header.Access-Control-Allow-Origin: !Sub "https://${DomainName}"
                      ResponseTemplates:
                          application/json: "{}"
                PassthroughBehavior: WHEN_NO_MATCH
                RequestTemplates:
                    application/json: '{"statusCode": 200}'
            MethodResponses:
                - StatusCode: 200
                  ResponseModels:
                      application/json: "Empty"
                  ResponseParameters:
                      method.response.header.Access-Control-Allow-Headers: true
                      method.response.header.Access-Control-Allow-Methods: true
                      method.response.header.Access-Control-Allow-Origin: true

    # Lambda Permission for API Gateway
    LambdaPermission:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !GetAtt QueensSolverFunction.Arn
            Principal: apigateway.amazonaws.com
            SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${QueensSolverApi}/*/*/*

    # API Gateway Custom Domain
    ApiCustomDomain:
        Type: AWS::ApiGateway::DomainName
        Properties:
            DomainName: !Sub ${ApiSubdomain}.${DomainName}
            CertificateArn: !Ref CertificateArn
            EndpointConfiguration:
                Types:
                    - EDGE

    # API Gateway Base Path Mapping
    ApiBasePathMapping:
        Type: AWS::ApiGateway::BasePathMapping
        Properties:
            DomainName: !Ref ApiCustomDomain
            RestApiId: !Ref QueensSolverApi
            Stage: !Ref Stage

    # Route 53 Record for API
    ApiDomainRecord:
        Type: AWS::Route53::RecordSet
        Properties:
            HostedZoneName: !Sub ${DomainName}.
            Name: !Sub ${ApiSubdomain}.${DomainName}
            Type: A
            AliasTarget:
                DNSName: !GetAtt ApiCustomDomain.DistributionDomainName
                HostedZoneId: Z2FDTNDATAQYW2 # CloudFront hosted zone ID (constant)
                EvaluateTargetHealth: false

    # API Gateway Usage Plan
    ApiUsagePlan:
        Type: AWS::ApiGateway::UsagePlan
        Properties:
            UsagePlanName: !Sub ${AWS::StackName}-usage-plan-${Stage}
            Description: Usage plan for Queens Solver API
            ApiStages:
                - ApiId: !Ref QueensSolverApi
                  Stage: !Ref Stage
            Throttle:
                RateLimit: !Ref RateLimit
                BurstLimit: !Ref BurstLimit
            Quota:
                Limit: !Ref QuotaLimit
                Period: DAY

    # WAF Web ACL for Rate-Based Protection
    ApiWafWebAcl:
        Type: AWS::WAFv2::WebACL
        Properties:
            Name: !Sub ${AWS::StackName}-waf-${Stage}
            Scope: REGIONAL
            DefaultAction:
                Allow: {}
            VisibilityConfig:
                SampledRequestsEnabled: true
                CloudWatchMetricsEnabled: true
                MetricName: !Sub ${AWS::StackName}-waf-metrics-${Stage}
            Rules:
                - Name: RateLimitRule
                  Priority: 0
                  Action:
                      Block: {}
                  VisibilityConfig:
                      SampledRequestsEnabled: true
                      CloudWatchMetricsEnabled: true
                      MetricName: !Sub ${AWS::StackName}-rate-limit-${Stage}
                  Statement:
                      RateBasedStatement:
                          Limit: 300
                          AggregateKeyType: IP

    # WAF Web ACL Association
    ApiWafWebAclAssociation:
        Type: AWS::WAFv2::WebACLAssociation
        Properties:
            ResourceArn: !Sub arn:aws:apigateway:${AWS::Region}::/restapis/${QueensSolverApi}/stages/${Stage}
            WebACLArn: !GetAtt ApiWafWebAcl.Arn

Outputs:
    ApiEndpoint:
        Description: API Gateway endpoint URL
        Value: !Sub https://${QueensSolverApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/
    QueensSolverFunction:
        Description: Queens Solver Lambda Function ARN
        Value: !GetAtt QueensSolverFunction.Arn
    ApiCustomDomainUrl:
        Description: Custom domain URL for API
        Value: !Sub https://${ApiSubdomain}.${DomainName}
    UsagePlanId:
        Description: API Usage Plan ID
        Value: !Ref ApiUsagePlan
    WafWebAclId:
        Description: WAF Web ACL ID
        Value: !Ref ApiWafWebAcl

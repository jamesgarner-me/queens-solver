AWSTemplateFormatVersion: '2010-09-09'
Description: 'Frontend infrastructure for Queens Solver with custom domain'

Parameters:
    DomainName:
        Type: String
        Default: jamesgarner.me
        Description: The domain name to use for the application

    CertificateArn:
        Type: String
        Description: ARN of the SSL certificate for the domain (must be in us-east-1 for CloudFront)

    CreateHostedZone:
        Type: String
        Default: 'false'
        AllowedValues:
            - 'true'
            - 'false'
        Description: Whether to create a new hosted zone (set to false if you already have one)

    ExistingHostedZoneId:
        Type: String
        Default: ''
        Description: ID of existing hosted zone (leave empty if CreateHostedZone is true)

    AllowedOrigins:
        Type: CommaDelimitedList
        Default: 'https://jamesgarner.me,https://www.jamesgarner.me,http://localhost:5173'
        Description: Comma-separated list of allowed origins for CORS

    LambdaEdgeFunctionARN:
        Type: String
        Description: ARN of the Lambda@Edge function for directory index handling (must be from us-east-1)

Conditions:
    ShouldCreateHostedZone: !Equals [!Ref CreateHostedZone, 'true']
    UseExistingHostedZone: !Not [!Equals [!Ref ExistingHostedZoneId, '']]

Resources:
    QueensSolverBucket:
        Type: AWS::S3::Bucket
        Properties:
            BucketName: !Sub ${AWS::StackName}-frontend
            # Remove public access configuration since we're using OAI
            WebsiteConfiguration:
                IndexDocument: index.html
                ErrorDocument: error/404.html

    QueensSolverBucketPolicy:
        Type: AWS::S3::BucketPolicy
        Properties:
            Bucket: !Ref QueensSolverBucket
            PolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - Sid: AllowCloudFrontAccess
                      Effect: Allow
                      Principal:
                          CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
                      Action: 's3:GetObject'
                      Resource: !Join ['', [!GetAtt QueensSolverBucket.Arn, '/*']]

    QueensSolverDistribution:
        Type: AWS::CloudFront::Distribution
        Properties:
            DistributionConfig:
                Enabled: true
                DefaultRootObject: index.html
                Aliases:
                    - !Ref DomainName
                    - !Sub www.${DomainName}
                Origins:
                    - DomainName: !GetAtt QueensSolverBucket.RegionalDomainName
                      Id: S3Origin
                      S3OriginConfig:
                          OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
                # Default cache behavior for root path
                # - Honors S3 cache-control headers for optimal caching
                # - Restricts methods to GET/HEAD for security
                # - No query string or cookie forwarding to improve cache hit ratio
                DefaultCacheBehavior:
                    TargetOriginId: S3Origin
                    ViewerProtocolPolicy: redirect-to-https
                    AllowedMethods:
                        - GET
                        - HEAD
                    CachedMethods:
                        - GET
                        - HEAD
                    ForwardedValues:
                        QueryString: false
                        Cookies:
                            Forward: none
                    ResponseHeadersPolicyId: !Ref QueensSolverResponseHeadersPolicy
                    # Use origin cache headers to control TTL
                    # This allows S3's cache-control headers to determine caching behavior
                    DefaultTTL: 86400 # 24 hours default if no cache header
                    MinTTL: 0 # Allow items to skip cache if needed
                    MaxTTL: 31536000 # 1 year max to match S3 headers
                # Cache behavior for Queens Solver application
                # - Specific configuration for /queens-solver/* paths
                # - Uses Lambda@Edge for proper directory index handling
                # - Honors S3 cache-control headers like the default behavior
                CacheBehaviors:
                    - PathPattern: '/queens-solver/*'
                      TargetOriginId: S3Origin
                      ViewerProtocolPolicy: redirect-to-https
                      AllowedMethods:
                          - GET
                          - HEAD
                      CachedMethods:
                          - GET
                          - HEAD
                      ForwardedValues:
                          QueryString: false
                          Cookies:
                              Forward: none
                      ResponseHeadersPolicyId: !Ref QueensSolverResponseHeadersPolicy
                      # Use origin cache headers to control TTL
                      DefaultTTL: 86400 # 24 hours default if no cache header
                      MinTTL: 0 # Allow items to skip cache if needed
                      MaxTTL: 31536000 # 1 year max to match S3 headers
                      # Lambda@Edge function handles directory index requests
                      # e.g., /queens-solver -> /queens-solver/index.html
                      LambdaFunctionAssociations:
                          - EventType: viewer-request
                            LambdaFunctionARN: !Ref LambdaEdgeFunctionARN
                # Custom error responses for both root and application paths
                # - Error pages are never cached (ErrorCachingMinTTL: 0)
                # - Specific error pages for queens-solver application
                # - Generic error handling for root domain
                CustomErrorResponses:
                    # Queens-solver path error responses
                    - ErrorCode: 403
                      ErrorCachingMinTTL: 0
                      ResponsePagePath: /queens-solver/error/403.html
                      ResponseCode: 403
                    - ErrorCode: 404
                      ErrorCachingMinTTL: 0
                      ResponsePagePath: /queens-solver/error/404.html
                      ResponseCode: 404
                    - ErrorCode: 500
                      ErrorCachingMinTTL: 0
                      ResponsePagePath: /queens-solver/error/500.html
                      ResponseCode: 500
                    - ErrorCode: 502
                      ErrorCachingMinTTL: 0
                      ResponsePagePath: /queens-solver/error/500.html
                      ResponseCode: 502
                    - ErrorCode: 503
                      ErrorCachingMinTTL: 0
                      ResponsePagePath: /queens-solver/error/500.html
                      ResponseCode: 503
                    - ErrorCode: 504
                      ErrorCachingMinTTL: 0
                      ResponsePagePath: /queens-solver/error/500.html
                      ResponseCode: 504
                ViewerCertificate:
                    AcmCertificateArn: !Ref CertificateArn
                    SslSupportMethod: sni-only
                    MinimumProtocolVersion: TLSv1.2_2021

    CloudFrontOriginAccessIdentity:
        Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
        Properties:
            CloudFrontOriginAccessIdentityConfig:
                Comment: !Sub ${AWS::StackName}-OAI

    # Route 53 Resources
    HostedZone:
        Type: AWS::Route53::HostedZone
        Condition: ShouldCreateHostedZone
        Properties:
            Name: !Ref DomainName

    DomainRecord:
        Type: AWS::Route53::RecordSet
        Properties:
            HostedZoneId: !If
                - ShouldCreateHostedZone
                - !Ref HostedZone
                - !Ref ExistingHostedZoneId
            Name: !Ref DomainName
            Type: A
            AliasTarget:
                DNSName: !GetAtt QueensSolverDistribution.DomainName
                HostedZoneId: Z2FDTNDATAQYW2 # CloudFront hosted zone ID (constant)
                EvaluateTargetHealth: false

    WwwDomainRecord:
        Type: AWS::Route53::RecordSet
        Properties:
            HostedZoneId: !If
                - ShouldCreateHostedZone
                - !Ref HostedZone
                - !Ref ExistingHostedZoneId
            Name: !Sub www.${DomainName}
            Type: A
            AliasTarget:
                DNSName: !GetAtt QueensSolverDistribution.DomainName
                HostedZoneId: Z2FDTNDATAQYW2 # CloudFront hosted zone ID (constant)
                EvaluateTargetHealth: false

    QueensSolverResponseHeadersPolicy:
        Type: AWS::CloudFront::ResponseHeadersPolicy
        Properties:
            ResponseHeadersPolicyConfig:
                Name: !Sub ${AWS::StackName}-response-headers-policy
                Comment: 'Response headers policy for Queens Solver application'
                CorsConfig:
                    AccessControlAllowOrigins:
                        Items: !Ref AllowedOrigins
                    AccessControlAllowHeaders:
                        Items: ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept']
                    AccessControlAllowMethods:
                        Items: ['GET', 'HEAD', 'OPTIONS']
                    AccessControlMaxAgeSec: 600
                    OriginOverride: false
                    AccessControlAllowCredentials: false
                SecurityHeadersConfig:
                    ContentTypeOptions:
                        Override: true
                    FrameOptions:
                        Override: true
                        FrameOption: SAMEORIGIN
                    StrictTransportSecurity:
                        Override: true
                        Preload: true
                        AccessControlMaxAgeSec: 31536000 # 1 year
                        IncludeSubdomains: true
                    ReferrerPolicy:
                        Override: true
                        ReferrerPolicy: strict-origin-when-cross-origin
                    ContentSecurityPolicy:
                        Override: true
                        ContentSecurityPolicy: "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; connect-src 'self' https://api.jamesgarner.me;"

Outputs:
    BucketName:
        Description: Name of S3 bucket
        Value: !Ref QueensSolverBucket
    CloudFrontURL:
        Description: URL for website hosted on CloudFront
        Value: !Sub https://${QueensSolverDistribution.DomainName}
    CloudFrontDistributionId:
        Description: ID of the CloudFront distribution
        Value: !Ref QueensSolverDistribution
    DomainURL:
        Description: Custom domain URL
        Value: !Sub https://${DomainName}/queens-solver
    HostedZoneId:
        Description: ID of the Route 53 hosted zone
        Value: !If
            - ShouldCreateHostedZone
            - !Ref HostedZone
            - !Ref ExistingHostedZoneId
    NameServers:
        Condition: ShouldCreateHostedZone
        Description: Nameservers for the hosted zone
        Value: !Join [', ', !GetAtt HostedZone.NameServers]

name: Backend CI/CD

on:
    push:
        branches: [main]
        paths:
            - "backend/**"
    pull_request:
        branches: [main]
        paths:
            - "backend/**"
    workflow_dispatch:

jobs:
    test:
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: backend

        steps:
            - uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: "3.13" # Match the version in template.yaml

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt

            - name: Run tests
              run: python -m unittest discover tests

    deploy-infrastructure:
        needs: test
        if: github.ref == 'refs/heads/main'
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: backend
        outputs:
            function_name: ${{ steps.get-function.outputs.function_name }}
            frontend_url: ${{ steps.get-frontend-url.outputs.frontend_url }}

        steps:
            - uses: actions/checkout@v4

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ secrets.AWS_REGION }}

            - name: Get Frontend CloudFront URL
              id: get-frontend-url
              run: |
                  FRONTEND_URL=$(aws cloudformation describe-stacks \
                    --stack-name queens-solver-frontend \
                    --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontURL`].OutputValue' \
                    --output text)
                  echo "frontend_url=$FRONTEND_URL" >> $GITHUB_OUTPUT
                  echo "FRONTEND_URL=$FRONTEND_URL" >> $GITHUB_ENV

            - name: Deploy CloudFormation stack
              run: |
                  aws cloudformation deploy \
                    --template-file template.yaml \
                    --stack-name queens-solver-backend \
                    --parameter-overrides Stage=prod FrontendCloudFrontUrl=${{ env.FRONTEND_URL }} \
                    --capabilities CAPABILITY_IAM \
                    --no-fail-on-empty-changeset

            - name: Get Lambda function name
              id: get-function
              run: |
                  FUNCTION_NAME=$(aws cloudformation describe-stacks \
                    --stack-name queens-solver-backend \
                    --query 'Stacks[0].Outputs[?OutputKey==`QueensSolverFunction`].OutputValue' \
                    --output text | sed -E 's|arn:aws:lambda:.*:function:([^:]+).*|\1|')
                  echo "function_name=$FUNCTION_NAME" >> $GITHUB_OUTPUT

    deploy:
        needs: deploy-infrastructure
        if: github.ref == 'refs/heads/main'
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: backend
        env:
            ENVIRONMENT: prod
            API_STAGE: prod
            LOG_LEVEL: INFO

        steps:
            - uses: actions/checkout@v4

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ secrets.AWS_REGION }}

            - name: Create function and layer packages
              run: |
                  # Create function package (application code only)
                  rm -rf function-package
                  mkdir -p function-package
                  cp -r src/* function-package/
                  cd function-package
                  zip -r ../function.zip .
                  cd ..

                  # Create layer package (dependencies only)
                  rm -rf layer-package
                  mkdir -p layer-package/python
                  pip install -r requirements.txt -t layer-package/python
                  cd layer-package
                  zip -r ../layer.zip .
                  cd ..

            - name: Update Lambda layer
              id: update-layer
              run: |
                  LAYER_VERSION=$(aws lambda publish-layer-version \
                    --layer-name $(aws cloudformation describe-stacks \
                      --stack-name queens-solver-backend \
                      --query 'Stacks[0].Resources[?LogicalResourceId==`DependenciesLayer`].PhysicalResourceId' \
                      --output text) \
                    --zip-file fileb://layer.zip \
                    --compatible-runtimes python3.13 \
                    --query 'Version' \
                    --output text)
                  echo "layer_version=$LAYER_VERSION" >> $GITHUB_OUTPUT

            - name: Update Lambda function
              run: |
                  aws lambda update-function-code \
                    --function-name ${{ needs.deploy-infrastructure.outputs.function_name }} \
                    --zip-file fileb://function.zip

            - name: Wait for function update to complete
              run: |
                  aws lambda wait function-updated \
                    --function-name ${{ needs.deploy-infrastructure.outputs.function_name }}

            - name: Update Lambda configuration
              run: |
                  # Get the layer ARN
                  LAYER_ARN=$(aws lambda list-layer-versions \
                    --layer-name $(aws cloudformation describe-stacks \
                      --stack-name queens-solver-backend \
                      --query 'Stacks[0].Resources[?LogicalResourceId==`DependenciesLayer`].PhysicalResourceId' \
                      --output text) \
                    --query 'LayerVersions[0].LayerVersionArn' \
                    --output text)

                  # Update function configuration with both environment variables and layer
                  aws lambda update-function-configuration \
                    --function-name ${{ needs.deploy-infrastructure.outputs.function_name }} \
                    --layers "$LAYER_ARN" \
                    --environment "Variables={ENVIRONMENT=${{ env.ENVIRONMENT }},API_STAGE=${{ env.API_STAGE }},LOG_LEVEL=${{ env.LOG_LEVEL }},ALLOWED_ORIGINS=http://localhost:5173,${{ needs.deploy-infrastructure.outputs.frontend_url }}}"

name: Backend CI/CD

on:
    push:
        branches: [main]
        paths:
            - "backend/**"
    pull_request:
        branches: [main]
        paths:
            - "backend/**"
    workflow_dispatch:

jobs:
    test:
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: backend

        steps:
            - uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: "3.13" # Match the version in template.yaml

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt

            - name: Run tests
              run: python -m unittest discover tests

    deploy-infrastructure:
        needs: test
        if: github.ref == 'refs/heads/main'
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: backend
        outputs:
            function_name: ${{ steps.get-function.outputs.function_name }}
            frontend_url: ${{ steps.get-frontend-url.outputs.frontend_url }}

        steps:
            - uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: "3.13"

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ secrets.AWS_REGION }}

            - name: Get Frontend CloudFront URL
              id: get-frontend-url
              run: |
                  FRONTEND_URL=$(aws cloudformation describe-stacks \
                    --stack-name queens-solver-frontend \
                    --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontURL`].OutputValue' \
                    --output text)
                  echo "frontend_url=$FRONTEND_URL" >> $GITHUB_OUTPUT
                  echo "FRONTEND_URL=$FRONTEND_URL" >> $GITHUB_ENV

            - name: Get Certificate ARN
              id: get-certificate
              run: |
                  # Set the domain name directly (more reliable than parsing from template)
                  DOMAIN_NAME="jamesgarner.me"
                  echo "Using domain name: $DOMAIN_NAME"

                  # For EDGE-optimized API Gateway, certificates MUST be in us-east-1 region
                  echo "Checking for certificate in us-east-1 region (required for EDGE endpoint)..."

                  # List all certificates to help with debugging
                  echo "Available certificates in us-east-1:"
                  aws acm list-certificates --region us-east-1 --output table

                  # Try to find a certificate that would work for our domain
                  CERT_ARN=$(aws acm list-certificates --region us-east-1 \
                    --query "CertificateSummaryList[?contains(DomainName, '$DOMAIN_NAME') || contains(DomainName, '*')].CertificateArn" \
                    --output text | head -1)

                  if [ -z "$CERT_ARN" ] || [ "$CERT_ARN" = "None" ]; then
                    echo ""
                    echo "ERROR: No suitable certificate found in us-east-1 region"
                    echo "NOTE: Certificates for EDGE-optimized API Gateway MUST be in us-east-1 region"
                    echo ""
                    echo "To create a certificate in us-east-1 region, run the following command:"
                    echo "aws acm request-certificate --region us-east-1 --domain-name api.$DOMAIN_NAME --validation-method DNS"
                    echo ""
                    echo "After creating the certificate, follow the validation process before rerunning this workflow."
                    echo "For more information: https://docs.aws.amazon.com/acm/latest/userguide/dns-validation.html"
                    exit 1
                  fi

                  echo "Found Certificate ARN in us-east-1: $CERT_ARN"
                  echo "certificate_arn=$CERT_ARN" >> $GITHUB_OUTPUT

            - name: Get S3 bucket name
              id: get-bucket
              run: |
                  S3_BUCKET=$(aws cloudformation describe-stacks \
                    --stack-name queens-solver-frontend \
                    --query 'Stacks[0].Outputs[?OutputKey==`BucketName`].OutputValue' \
                    --output text)
                  echo "bucket_name=$S3_BUCKET" >> $GITHUB_OUTPUT

            - name: Create dependencies layer
              run: |
                  # Create layer package (dependencies only)
                  rm -rf layer-package
                  mkdir -p layer-package/python
                  pip install -r requirements.txt -t layer-package/python
                  cd layer-package
                  zip -r ../dependencies.zip .
                  cd ..

            - name: Upload dependencies layer to S3
              run: |
                  aws s3 cp dependencies.zip s3://${{ steps.get-bucket.outputs.bucket_name }}/dependencies.zip

            - name: Deploy CloudFormation stack
              run: |
                  # Set the domain name directly (more reliable than parsing from template)
                  DOMAIN_NAME="jamesgarner.me"
                  API_SUBDOMAIN="api"

                  aws cloudformation deploy \
                    --template-file template.yaml \
                    --stack-name queens-solver-backend \
                    --parameter-overrides \
                      Stage=prod \
                      FrontendCloudFrontUrl=${{ env.FRONTEND_URL }} \
                      DependenciesLayerBucket=${{ steps.get-bucket.outputs.bucket_name }} \
                      DependenciesLayerKey=dependencies.zip \
                      DomainName=$DOMAIN_NAME \
                      ApiSubdomain=$API_SUBDOMAIN \
                      CertificateArn=${{ steps.get-certificate.outputs.certificate_arn }} \
                    --capabilities CAPABILITY_IAM \
                    --no-fail-on-empty-changeset

            - name: Get Lambda function name
              id: get-function
              run: |
                  FUNCTION_NAME=$(aws cloudformation describe-stacks \
                    --stack-name queens-solver-backend \
                    --query 'Stacks[0].Outputs[?OutputKey==`QueensSolverFunction`].OutputValue' \
                    --output text | sed -E 's|arn:aws:lambda:.*:function:([^:]+).*|\1|')
                  echo "function_name=$FUNCTION_NAME" >> $GITHUB_OUTPUT

    deploy:
        needs: deploy-infrastructure
        if: github.ref == 'refs/heads/main'
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: backend
        env:
            ENVIRONMENT: prod
            API_STAGE: prod
            LOG_LEVEL: INFO

        steps:
            - uses: actions/checkout@v4

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ secrets.AWS_REGION }}

            - name: Create function package
              run: |
                  # Create function package (application code only)
                  rm -rf function-package
                  mkdir -p function-package
                  cp -r src/* function-package/
                  cd function-package
                  zip -r ../function.zip .
                  cd ..

            - name: Update Lambda function
              run: |
                  aws lambda update-function-code \
                    --function-name ${{ needs.deploy-infrastructure.outputs.function_name }} \
                    --zip-file fileb://function.zip

            - name: Wait for function update to complete
              run: |
                  aws lambda wait function-updated \
                    --function-name ${{ needs.deploy-infrastructure.outputs.function_name }}

            - name: Update Lambda configuration
              run: |
                  # Get the full layer ARN from CloudFormation using describe-stack-resources
                  LAYER_FULL_ARN=$(aws cloudformation describe-stack-resources \
                    --stack-name queens-solver-backend \
                    --logical-resource-id DependenciesLayer \
                    --query 'StackResources[0].PhysicalResourceId' \
                    --output text)

                  echo "Layer full ARN: $LAYER_FULL_ARN"

                  if [ -z "$LAYER_FULL_ARN" ] || [ "$LAYER_FULL_ARN" = "None" ]; then
                    echo "ERROR: Layer resource not found in CloudFormation stack"
                    exit 1
                  fi

                  # Extract just the layer name from the ARN (without version)
                  LAYER_NAME=$(echo $LAYER_FULL_ARN | sed -E 's|arn:aws:lambda:[^:]+:[0-9]+:layer:([^:]+):.*|\1|')
                  echo "Layer name: $LAYER_NAME"

                  # Get the latest layer version's ARN
                  LAYER_ARN=$(aws lambda list-layer-versions \
                    --layer-name $LAYER_NAME \
                    --query 'LayerVersions[0].LayerVersionArn' \
                    --output text)

                  echo "Layer ARN: $LAYER_ARN"

                  # Ensure we have a valid layer ARN
                  if [ -z "$LAYER_ARN" ] || [ "$LAYER_ARN" = "None" ]; then
                    echo "ERROR: Failed to retrieve a valid Lambda layer ARN"
                    echo "Layer versions response:"
                    aws lambda list-layer-versions --layer-name $LAYER_NAME
                    exit 1
                  fi

                  echo "Updating function with layer ARN: $LAYER_ARN"
                  aws lambda update-function-configuration \
                    --function-name ${{ needs.deploy-infrastructure.outputs.function_name }} \
                    --layers "$LAYER_ARN" \
                    --environment '{"Variables":{"ENVIRONMENT":"${{ env.ENVIRONMENT }}","API_STAGE":"${{ env.API_STAGE }}","LOG_LEVEL":"${{ env.LOG_LEVEL }}","ALLOWED_ORIGINS":"http://localhost:5173,${{ needs.deploy-infrastructure.outputs.frontend_url }}"}}'

name: Frontend CI/CD

on:
    push:
        branches: [main]
        paths:
            - "frontend/**"
    pull_request:
        branches: [main]
        paths:
            - "frontend/**"
    workflow_dispatch:

jobs:
    test:
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: frontend

        steps:
            - uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"
                  cache: "npm"
                  cache-dependency-path: frontend/package-lock.json

            - name: Clean install
              run: |
                  rm -rf node_modules package-lock.json
                  npm install
                  npm install @rollup/rollup-linux-x64-gnu

            - name: Run tests
              run: npm test

    deploy:
        needs: test
        if: github.ref == 'refs/heads/main'
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: frontend

        steps:
            - uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"
                  cache: "npm"
                  cache-dependency-path: frontend/package-lock.json

            - name: Clean install
              run: |
                  rm -rf node_modules package-lock.json
                  npm install
                  npm install @rollup/rollup-linux-x64-gnu

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ secrets.AWS_REGION }}

            - name: Get API Gateway ID
              run: |
                  API_ID=$(aws cloudformation describe-stacks \
                    --stack-name queens-solver-backend \
                    --query 'Stacks[0].Outputs[?OutputKey==`ApiEndpoint`].OutputValue' \
                    --output text | sed -E 's|https://([^.]+).*|\1|')
                  echo "API_GATEWAY_ID=$API_ID" >> $GITHUB_ENV

            - name: Prepare environment variables
              run: |
                  # Create production env file with actual values
                  sed -i "s/\${API_GATEWAY_ID}/${{ env.API_GATEWAY_ID }}/g" .env.production
                  sed -i "s/\${AWS_REGION}/${{ secrets.AWS_REGION }}/g" .env.production

            - name: Build for production
              run: npm run build:production

            - name: Get Certificate ARN
              id: get-certificate
              run: |
                  CERT_ARN=$(aws acm list-certificates --region us-east-1 \
                    --query "CertificateSummaryList[?DomainName=='${{ secrets.DOMAIN_NAME }}'].CertificateArn" \
                    --output text)
                  echo "certificate_arn=$CERT_ARN" >> $GITHUB_OUTPUT

            - name: Deploy CloudFormation stack
              run: |
                  aws cloudformation deploy \
                    --template-file template.yaml \
                    --stack-name queens-solver-frontend \
                    --parameter-overrides \
                      DomainName=${{ secrets.DOMAIN_NAME }} \
                      CertificateArn=${{ steps.get-certificate.outputs.certificate_arn }} \
                    --capabilities CAPABILITY_IAM \
                    --no-fail-on-empty-changeset

            - name: Get S3 bucket name
              id: get-bucket
              run: |
                  BUCKET_NAME=$(aws cloudformation describe-stacks \
                    --stack-name queens-solver-frontend \
                    --query 'Stacks[0].Outputs[?OutputKey==`BucketName`].OutputValue' \
                    --output text)
                  echo "bucket_name=$BUCKET_NAME" >> $GITHUB_OUTPUT

            - name: Deploy to S3
              run: |
                  aws s3 sync dist/ s3://${{ steps.get-bucket.outputs.bucket_name }}/queens-solver --delete

            - name: Get CloudFront URL
              id: get-cloudfront-url
              run: |
                  CLOUDFRONT_URL=$(aws cloudformation describe-stacks \
                    --stack-name queens-solver-frontend \
                    --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontURL`].OutputValue' \
                    --output text)
                  echo "cloudfront_url=$CLOUDFRONT_URL" >> $GITHUB_OUTPUT

            - name: Get Domain URL
              id: get-domain-url
              run: |
                  DOMAIN_URL=$(aws cloudformation describe-stacks \
                    --stack-name queens-solver-frontend \
                    --query 'Stacks[0].Outputs[?OutputKey==`DomainURL`].OutputValue' \
                    --output text)
                  echo "domain_url=$DOMAIN_URL" >> $GITHUB_OUTPUT

            - name: Update backend with CloudFront URL
              run: |
                  aws cloudformation deploy \
                    --template-file ../backend/template.yaml \
                    --stack-name queens-solver-backend \
                    --parameter-overrides \
                      FrontendCloudFrontUrl=${{ steps.get-cloudfront-url.outputs.cloudfront_url }} \
                      DomainName=${{ secrets.DOMAIN_NAME }} \
                      ApiSubdomain=api \
                      CertificateArn=${{ steps.get-certificate.outputs.certificate_arn }} \
                    --capabilities CAPABILITY_IAM \
                    --no-fail-on-empty-changeset

            - name: Get CloudFront distribution ID
              id: get-cloudfront
              run: |
                  DISTRIBUTION_ID=$(aws cloudformation describe-stacks \
                    --stack-name queens-solver-frontend \
                    --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontDistributionId`].OutputValue' \
                    --output text)
                  echo "distribution_id=$DISTRIBUTION_ID" >> $GITHUB_OUTPUT

            - name: Invalidate CloudFront
              run: |
                  aws cloudfront create-invalidation --distribution-id ${{ steps.get-cloudfront.outputs.distribution_id }} --paths "/*"

name: Frontend CI/CD

on:
    push:
        branches: [main]
        paths:
            - "frontend/**"
    pull_request:
        branches: [main]
        paths:
            - "frontend/**"
    workflow_dispatch:

jobs:
    test:
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: frontend

        steps:
            - uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"
                  cache: "npm"
                  cache-dependency-path: frontend/package-lock.json

            - name: Clean install
              run: |
                  rm -rf node_modules package-lock.json
                  npm install
                  npm install @rollup/rollup-linux-x64-gnu

            - name: Run tests
              run: npm test

    deploy:
        needs: test
        if: github.ref == 'refs/heads/main'
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: frontend

        steps:
            - uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"
                  cache: "npm"
                  cache-dependency-path: frontend/package-lock.json

            - name: Clean install
              run: |
                  rm -rf node_modules package-lock.json
                  npm install
                  npm install @rollup/rollup-linux-x64-gnu

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ secrets.AWS_REGION }}

            - name: Get API Gateway ID
              run: |
                  API_ID=$(aws cloudformation describe-stacks \
                    --stack-name queens-solver-backend \
                    --query 'Stacks[0].Outputs[?OutputKey==`ApiEndpoint`].OutputValue' \
                    --output text | sed -E 's|https://([^.]+).*|\1|')
                  echo "API_GATEWAY_ID=$API_ID" >> $GITHUB_ENV

            - name: Prepare environment variables
              run: |
                  # Create production env file with actual values
                  sed -i "s/\${API_GATEWAY_ID}/${{ env.API_GATEWAY_ID }}/g" .env.production
                  sed -i "s/\${AWS_REGION}/${{ secrets.AWS_REGION }}/g" .env.production

                  # Make sure the base path is correctly set
                  grep -q "VITE_BASE_PATH=" .env.production || echo "VITE_BASE_PATH=/queens-solver" >> .env.production

                  # Display the environment variables for debugging
                  echo "Environment variables for build:"
                  cat .env.production

            - name: Build for production
              run: npm run build:production

            - name: Get Certificate ARN
              id: get-certificate
              run: |
                  # Hard-coded approach - use a specific certificate ARN directly
                  # Using the same certificate as in backend-ci.yml for consistency
                  CERT_ARN="arn:aws:acm:us-east-1:449421028589:certificate/79fd171b-4dfa-47a4-9e6c-a186b9e76eb1"
                  echo "Using certificate ARN: $CERT_ARN"
                  echo "certificate_arn=$CERT_ARN" >> $GITHUB_OUTPUT

            - name: Get Hosted Zone ID
              id: get-hosted-zone
              run: |
                  # Check if hosted zone already exists
                  HOSTED_ZONE_ID=$(aws route53 list-hosted-zones-by-name --dns-name "${{ secrets.DOMAIN_NAME }}." --max-items 1 --output text --query 'HostedZones[0].Id' | sed 's/\/hostedzone\///')

                  if [ -n "$HOSTED_ZONE_ID" ]; then
                    echo "Existing hosted zone found: $HOSTED_ZONE_ID"
                    echo "create_hosted_zone=false" >> $GITHUB_OUTPUT
                    echo "hosted_zone_id=$HOSTED_ZONE_ID" >> $GITHUB_OUTPUT
                  else
                    echo "No existing hosted zone found, will create one"
                    echo "create_hosted_zone=true" >> $GITHUB_OUTPUT
                    echo "hosted_zone_id=" >> $GITHUB_OUTPUT
                  fi

            # Deploy Lambda@Edge function in us-east-1 region
            - name: Deploy Lambda@Edge function in us-east-1
              run: |
                  # First, extract the Lambda function code from template.yaml
                  cat > lambda-edge-function.js << 'EOF'
                  'use strict';
                  exports.handler = (event, context, callback) => {
                      // Get the request from the event
                      const request = event.Records[0].cf.request;
                      
                      // Extract URI
                      let uri = request.uri;
                      
                      console.log('Original URI: ', uri);
                      
                      // Handle directory paths - paths ending with /
                      if (uri.endsWith('/')) {
                          request.uri = uri + 'index.html';
                          console.log('Appended index.html to directory path: ', request.uri);
                      } 
                      // Handle paths without file extensions
                      else if (!uri.includes('.')) {
                          // Special case for /queens-solver
                          if (uri === '/queens-solver') {
                              request.uri = '/queens-solver/index.html';
                              console.log('Handling special case for /queens-solver: ', request.uri);
                          } else {
                              // For other paths without extensions, assume directory and add /index.html
                              request.uri = uri + '/index.html';
                              console.log('Added /index.html to path without extension: ', request.uri);
                          }
                      }
                      // URL path is already pointing to a file with extension - no change needed
                      
                      console.log('Final URI: ', request.uri);
                      return callback(null, request);
                  };
                  EOF

                  # Create Lambda deployment package
                  zip lambda-edge-function.zip lambda-edge-function.js

                  # Create or update the Lambda function in us-east-1
                  # First check if role exists
                  ROLE_ARN=$(aws iam list-roles --query "Roles[?RoleName=='queens-solver-lambda-edge-role'].Arn" --output text --region us-east-1 || echo "")

                  if [ -z "$ROLE_ARN" ]; then
                    # Create role and attach policy
                    aws iam create-role \
                      --role-name queens-solver-lambda-edge-role \
                      --assume-role-policy-document '{
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Principal": {
                              "Service": [
                                "lambda.amazonaws.com",
                                "edgelambda.amazonaws.com"
                              ]
                            },
                            "Action": "sts:AssumeRole"
                          }
                        ]
                      }' \
                      --region us-east-1
                    
                    aws iam attach-role-policy \
                      --role-name queens-solver-lambda-edge-role \
                      --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole \
                      --region us-east-1

                    # Wait for role to propagate
                    sleep 10
                    
                    ROLE_ARN=$(aws iam get-role --role-name queens-solver-lambda-edge-role --query "Role.Arn" --output text --region us-east-1)
                  fi

                  # Check if function exists
                  FUNCTION_EXISTS=$(aws lambda list-functions --query "Functions[?FunctionName=='queens-solver-directory-index'].FunctionName" --output text --region us-east-1 || echo "")

                  if [ -z "$FUNCTION_EXISTS" ]; then
                    # Create function
                    aws lambda create-function \
                      --function-name queens-solver-directory-index \
                      --runtime nodejs18.x \
                      --role "$ROLE_ARN" \
                      --handler lambda-edge-function.handler \
                      --zip-file fileb://lambda-edge-function.zip \
                      --description "Lambda@Edge function to handle directory index requests" \
                      --region us-east-1
                  else
                    # Update function
                    aws lambda update-function-code \
                      --function-name queens-solver-directory-index \
                      --zip-file fileb://lambda-edge-function.zip \
                      --region us-east-1
                  fi

                  # Wait for the function to become active (after either creation or update)
                  echo "Waiting for Lambda function to become active..."
                  # Poll for function state
                  FUNCTION_STATE="Pending"
                  RETRY_COUNT=0
                  MAX_RETRIES=30

                  while [ "$FUNCTION_STATE" != "Active" ] && [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
                    sleep 5
                    FUNCTION_INFO=$(aws lambda get-function \
                      --function-name queens-solver-directory-index \
                      --region us-east-1)
                    
                    FUNCTION_STATE=$(echo $FUNCTION_INFO | jq -r '.Configuration.State')
                    echo "Current function state: $FUNCTION_STATE"
                    
                    RETRY_COUNT=$((RETRY_COUNT+1))
                  done

                  if [ "$FUNCTION_STATE" != "Active" ]; then
                    echo "Lambda function did not become active within the timeout period"
                    exit 1
                  fi

                  echo "Lambda function is now active"

                  # Create version
                  VERSION_OUTPUT=$(aws lambda publish-version \
                    --function-name queens-solver-directory-index \
                    --description "Version for Lambda@Edge deployment" \
                    --region us-east-1)

                  # Get function ARN with version
                  LAMBDA_VERSION_ARN=$(echo $VERSION_OUTPUT | jq -r '.FunctionArn')

                  # Save ARN to environment
                  echo "LAMBDA_VERSION_ARN=$LAMBDA_VERSION_ARN" >> $GITHUB_ENV

                  echo "Lambda@Edge function ARN with version: $LAMBDA_VERSION_ARN"

            - name: Deploy CloudFormation stack with Lambda@Edge reference
              run: |
                  aws cloudformation deploy \
                    --template-file template.yaml \
                    --stack-name queens-solver-frontend \
                    --parameter-overrides \
                      DomainName=${{ secrets.DOMAIN_NAME }} \
                      CertificateArn=${{ steps.get-certificate.outputs.certificate_arn }} \
                      CreateHostedZone=${{ steps.get-hosted-zone.outputs.create_hosted_zone }} \
                      ExistingHostedZoneId=${{ steps.get-hosted-zone.outputs.hosted_zone_id }} \
                      AllowedOrigins="https://${{ secrets.DOMAIN_NAME }},https://www.${{ secrets.DOMAIN_NAME }},https://api.${{ secrets.DOMAIN_NAME }},http://localhost:5173" \
                      LambdaEdgeFunctionARN="${{ env.LAMBDA_VERSION_ARN }}" \
                    --capabilities CAPABILITY_IAM \
                    --no-fail-on-empty-changeset

            - name: Get S3 bucket name
              id: get-bucket
              run: |
                  BUCKET_NAME=$(aws cloudformation describe-stacks \
                    --stack-name queens-solver-frontend \
                    --query 'Stacks[0].Outputs[?OutputKey==`BucketName`].OutputValue' \
                    --output text)
                  echo "bucket_name=$BUCKET_NAME" >> $GITHUB_OUTPUT

            - name: Deploy to S3
              run: |
                  # Deploy static assets with long cache duration (1 year)
                  # These are safe to cache aggressively as they include content hash in filenames
                  aws s3 sync dist/ s3://${{ steps.get-bucket.outputs.bucket_name }}/queens-solver \
                    --delete \
                    --cache-control "max-age=31536000,public" \
                    --exclude "*.html" \
                    --exclude "error/*"

                  # Deploy HTML files with short cache duration (24 hours)
                  # This allows for quicker updates while still providing some caching benefit
                  aws s3 sync dist/ s3://${{ steps.get-bucket.outputs.bucket_name }}/queens-solver \
                    --delete \
                    --cache-control "max-age=86400,public" \
                    --content-type "text/html" \
                    --include "*.html" \
                    --exclude "error/*"

                  # Deploy error pages with no caching
                  # This ensures error pages are always fresh
                  aws s3 sync dist/error/ s3://${{ steps.get-bucket.outputs.bucket_name }}/queens-solver/error \
                    --delete \
                    --cache-control "max-age=0,no-cache,no-store,must-revalidate" \
                    --content-type "text/html"

                  # Ensure correct content types for JavaScript files
                  aws s3 cp s3://${{ steps.get-bucket.outputs.bucket_name }}/queens-solver/assets/ \
                    s3://${{ steps.get-bucket.outputs.bucket_name }}/queens-solver/assets/ \
                    --recursive \
                    --exclude "*" \
                    --include "*.js" \
                    --content-type "application/javascript" \
                    --metadata-directive REPLACE \
                    --cache-control "max-age=31536000,public"

            - name: Get CloudFront URL
              id: get-cloudfront-url
              run: |
                  CLOUDFRONT_URL=$(aws cloudformation describe-stacks \
                    --stack-name queens-solver-frontend \
                    --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontURL`].OutputValue' \
                    --output text)
                  echo "cloudfront_url=$CLOUDFRONT_URL" >> $GITHUB_OUTPUT

            - name: Get Domain URL
              id: get-domain-url
              run: |
                  DOMAIN_URL=$(aws cloudformation describe-stacks \
                    --stack-name queens-solver-frontend \
                    --query 'Stacks[0].Outputs[?OutputKey==`DomainURL`].OutputValue' \
                    --output text)
                  echo "domain_url=$DOMAIN_URL" >> $GITHUB_OUTPUT

            - name: Update backend with CloudFront URL
              run: |
                  aws cloudformation deploy \
                    --template-file ../backend/template.yaml \
                    --stack-name queens-solver-backend \
                    --parameter-overrides \
                      FrontendCloudFrontUrl=${{ steps.get-cloudfront-url.outputs.cloudfront_url }} \
                      DomainName=${{ secrets.DOMAIN_NAME }} \
                      ApiSubdomain=api \
                      CertificateArn=${{ steps.get-certificate.outputs.certificate_arn }} \
                    --capabilities CAPABILITY_IAM \
                    --no-fail-on-empty-changeset

            - name: Get CloudFront distribution ID
              id: get-cloudfront
              run: |
                  DISTRIBUTION_ID=$(aws cloudformation describe-stacks \
                    --stack-name queens-solver-frontend \
                    --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontDistributionId`].OutputValue' \
                    --output text)
                  echo "distribution_id=$DISTRIBUTION_ID" >> $GITHUB_OUTPUT

            - name: Invalidate CloudFront
              run: |
                  aws cloudfront create-invalidation --distribution-id ${{ steps.get-cloudfront.outputs.distribution_id }} --paths "/*"
